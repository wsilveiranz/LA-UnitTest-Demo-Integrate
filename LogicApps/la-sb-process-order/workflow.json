{
    "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "Initialize_variable": {
                "type": "InitializeVariable",
                "inputs": {
                    "variables": [
                        {
                            "name": "targetUrl",
                            "type": "string"
                        }
                    ]
                },
                "runAfter": {}
            },
            "Parse_Order": {
                "type": "ParseJson",
                "inputs": {
                    "content": "@triggerBody()?['contentData']",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "orderId": {
                                "type": "string"
                            },
                            "customerId": {
                                "type": "string"
                            },
                            "region": {
                                "type": "string"
                            },
                            "status": {
                                "type": "string"
                            },
                            "orderDetails": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "productId": {
                                            "type": "string"
                                        },
                                        "productName": {
                                            "type": "string"
                                        },
                                        "quantity": {
                                            "type": "integer"
                                        },
                                        "unitPrice": {
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "productId",
                                        "productName",
                                        "quantity",
                                        "unitPrice"
                                    ]
                                }
                            }
                        }
                    }
                },
                "runAfter": {
                    "Initialize_variable": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Condition": {
                "type": "If",
                "expression": {
                    "and": [
                        {
                            "equals": [
                                "@tolower(body('Parse_Order')?['status'])",
                                "new"
                            ]
                        }
                    ]
                },
                "actions": {
                    "Set_variable_to_Insert": {
                        "type": "SetVariable",
                        "inputs": {
                            "name": "targetUrl",
                            "value": "@parameters('insertTargetUrl')"
                        }
                    }
                },
                "else": {
                    "actions": {
                        "Set_variable_to_Update": {
                            "type": "SetVariable",
                            "inputs": {
                                "name": "targetUrl",
                                "value": "@parameters('updateTargetUrl')"
                            }
                        }
                    }
                },
                "runAfter": {
                    "Calculate_Discount": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Call_External_API": {
                "type": "Http",
                "inputs": {
                    "uri": "@variables('targetUrl')",
                    "method": "POST",
                    "headers": {
                        "Content-Type": "application/json"
                    },
                    "body": "@outputs('Generate_Final_Order')"
                },
                "runAfter": {
                    "Generate_Final_Order": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Complete_the_message_in_a_queue": {
                "type": "ServiceProvider",
                "inputs": {
                    "parameters": {
                        "queueName": "@parameters('queueName')",
                        "lockToken": "@triggerBody()?['lockToken']"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "serviceBus",
                        "operationId": "completeQueueMessageV2",
                        "serviceProviderId": "/serviceProviders/serviceBus"
                    }
                },
                "runAfter": {
                    "Call_External_API": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Abandon_the_message_in_a_queue": {
                "type": "ServiceProvider",
                "inputs": {
                    "parameters": {
                        "queueName": "@parameters('queueName')",
                        "lockToken": "@triggerBody()?['lockToken']"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "serviceBus",
                        "operationId": "abandonQueueMessageV2",
                        "serviceProviderId": "/serviceProviders/serviceBus"
                    }
                },
                "runAfter": {
                    "Call_External_API": [
                        "TIMEDOUT",
                        "SKIPPED",
                        "FAILED"
                    ]
                }
            },
            "Generate_Final_Order": {
                "type": "Compose",
                "inputs": "@union(body('Parse_Order'),body('Calculate_Discount'))",
                "runAfter": {
                    "Condition": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Calculate_Discount": {
                "type": "Workflow",
                "inputs": {
                    "host": {
                        "workflow": {
                            "id": "la-calculate-discount"
                        }
                    },
                    "body": {
                        "orderId": "@body('Parse_Order')?['orderId']",
                        "customerId": "@body('Parse_Order')?['customerId']",
                        "region": "@body('Parse_Order')?['region']",
                        "orderDetails": "@body('Parse_Order')?['orderDetails']"
                    }
                },
                "runAfter": {
                    "Parse_Order": [
                        "SUCCEEDED"
                    ]
                }
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "triggers": {
            "When_messages_are_available_in_a_queue_(peek-lock)": {
                "type": "ServiceProvider",
                "inputs": {
                    "parameters": {
                        "queueName": "@parameters('queueName')"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "serviceBus",
                        "operationId": "peekLockQueueMessagesV2",
                        "serviceProviderId": "/serviceProviders/serviceBus"
                    }
                },
                "splitOn": "@triggerOutputs()?['body']"
            }
        }
    },
    "kind": "Stateful"
}